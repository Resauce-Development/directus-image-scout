{"version":3,"file":"index.js","sources":["../../../src/endpoints/classes/RequestDetails.ts","../../../src/endpoints/providers.ts","../../../src/endpoints/index.ts"],"sourcesContent":["export default class RequestDetails {\n  constructor (req) {\n    this.req = req\n  }\n  /**\n   * Return data about the user making a request\n   */\n  getUserId() {\n    return this.req.accountability.user\n  }\n  /**\n   * Is there a user currently authenticated?\n   */\n  isAuthenticated() {\n    // Does the endpoints require a user to be authenticated?\n    const authRequired = \"RIS_REQUIRED_AUTH\" in process.env ? process.env.RIS_REQUIRED_AUTH : true\n    if (authRequired === 'false') return true\n    return this.getUserId() ? this.getUserId() : false\n  }\n  /**\n   * Get the URL of the currently used Directus API\n   */\n  getApiUrl() {\n    return this.req.protocol + '://' + this.req.get('host')\n  }\n  /**\n   * Get the body of the request\n   */\n  getBody() {\n    return this.req.body\n  }\n}\n","import fs from 'fs'\n\nconst PROVIDERS_DIR = __dirname + '/providers'\n\nlet providerList: string[] = []\n\nfs.readdir(PROVIDERS_DIR, function (err, items): void {\n  items.forEach((provider_name: string) => {\n    const Provider = require(PROVIDERS_DIR + `/${provider_name}`)\n    const newProvider = new Provider()\n    if (newProvider.key === process.env.RIS_DEFAULT_PROVIDER) {\n      providerList.unshift(newProvider)\n    } else {\n      providerList.push(newProvider)\n    }\n  })\n})\n\nexport default providerList\n","import RequestDetails from './classes/RequestDetails'\nimport providerList from './providers'\n\n/**\n * Get the provider object class from the list of providers\n * @param {String} providerName\n */\nfunction getProvider(providerName) {\n  const provider_key = providerName.toUpperCase()\n  return providerList.find(p => p.key === provider_key)\n}\n\n/**\n * Return an unauthorized message\n */\nfunction sendUnauthedMessage(res) {\n  res.status(500)\n  return res.send({ data: 'User is not authorized to make this request' })\n}\n\n/**\n * Register all of the URLs\n */\nexport default function registerEndpoint(router, { services, exceptions }) {\n\n  /**\n   * List the available endpoints for this extension.\n   */\n  router.get('/', (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    res.send({\n      '/': 'List the available endpoints for this extension. (You are here)',\n      '/providers': 'Get the information of all the providers',\n      '/providers/[provider]': 'Get the information about a single provider',\n      '/providers/[provider]/featured': 'Fetch the featured images the provider provides',\n      '/providers/[provider]/search?query=Dog&page=2': 'Search for provider images based on the users query',\n      '/providers/[provider]/download': 'Post request of a URL to download an image from the provider allowing a hidden prefix of api_key',\n    })\n  })\n\n  /**\n   * Get the information of all the providers\n   */\n  router.get('/providers', (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    res.send({ data: providerList })\n  })\n\n  /**\n   * Get the information about a single provider\n   */\n  router.get('/providers/:provider', (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    const provider = getProvider(req.params.provider)\n    if (!provider) {\n      res.status(500)\n      res.send({ data: 'This provider does not exist' })\n    }\n    if (!provider.is_configured) {\n      res.status(500)\n      res.send({ data: 'This provider has not been configured' })\n    }\n    res.send({ data: { provider } })\n  })\n\n  /**\n   * Fetch the featured images the provider provides\n   */\n  router.get('/providers/:provider/featured', async (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    try {\n      const provider = getProvider(req.params.provider)\n      const data = await provider.getFeatured()\n      res.send({ data })\n    } catch (e) {\n      res.status(500)\n      res.send({ data: 'Failed to get featured results' })\n    }\n  })\n\n  /**\n   * Search for provider images based on the users query\n   */\n  router.get('/providers/:provider/search', async (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    try {\n      const provider = getProvider(req.params.provider)\n      const data = await provider.getSearch(req.query.query, req.query.page)\n      res.send({ data })\n    } catch (e) {\n      res.status(500)\n      res.send({ data: 'Failed to get search results' })\n    }\n  })\n\n  /**\n   * Download an image using the URL provided in the post data.\n   */\n  router.post('/providers/:provider/download', async (req, res) => {\n    const request = new RequestDetails(req)\n    if (!request.isAuthenticated()) return sendUnauthedMessage(res)\n    try {\n      const provider = getProvider(req.params.provider)\n      const data = await provider.downloadImage(request)\n      res.send({ data })\n    } catch (e) {\n      res.status(500)\n      res.send({\n        data: 'Failed to import image. Ensure URL is the same as your HOST.'\n      })\n    }\n  })\n\n}\n"],"names":["RequestDetails","constructor","req","this","getUserId","accountability","user","isAuthenticated","process","env","RIS_REQUIRED_AUTH","getApiUrl","protocol","get","getBody","body","PROVIDERS_DIR","__dirname","providerList","getProvider","providerName","provider_key","toUpperCase","find","p","key","sendUnauthedMessage","res","status","send","data","fs","readdir","err","items","forEach","provider_name","newProvider","require","RIS_DEFAULT_PROVIDER","unshift","push","router","services","exceptions","provider","params","is_configured","async","getFeatured","e","getSearch","query","page","post","request","downloadImage"],"mappings":"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"}